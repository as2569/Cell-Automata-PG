import pygame
import sys
import random


class CellType(enumerate):
    EMPTY = 0
    SEA = 1
    PLAINS = 2
    COAST = 3
    HILL = 4
    MOUNTAIN = 5
    FOREST = 6


class GameStage(enumerate):
    INITIAL = 0
    SEED = 1
    CLUSTER = 2
    COASTPASS = 3
    HILLPASS = 4
    MOUNTAINPASS = 5
    FORESTSEED = 6
    FORESTGROW = 7


class Manager:
    def __init__(self):
        self.currentStage = GameStage.INITIAL


class Cell:
    def __init__(self, x, y, size):
        self.posX = x * size
        self.posY = y * size
        self.image = pygame.Surface((size, size))
        self.rect = self.image.get_rect()
        self.rect = self.rect.move(x * size, y * size)
        self.image.fill(black)
        self.state = CellType.EMPTY
        return

    def set_state(self, cell_type):
        self.state = cell_type

    def update(self):
        if self.state == 1:
            self.image.fill(blue)
        elif self.state == 2:
            self.image.fill(yellow)
        elif self.state == 3:
            self.image.fill(teal)
        elif self.state == 4:
            self.image.fill(orange)
        elif self.state == 5:
            self.image.fill(red)
        elif self.state == 6:
            self.image.fill(green)
        else:
            self.image.fill(black)


class Map:
    def __init__(self, x, y, size):
        self.mapWidth = x
        self.mapHeight = y
        self.cellSize = size
        self.matrix = {(0, 0): Cell}
        return

    def make_empty(self):
        for x in range(0, self.mapWidth):
            for y in range(0, self.mapHeight):
                self.matrix[(x, y)] = Cell(x, y, self.cellSize)
        return

    def get_cell_state(self, x, y):
        if x > self.mapWidth - 1 or x < 0 or y > self.mapHeight - 1 or y < 0:
            return CellType.SEA
        else:
            return self.matrix[(x, y)].state

    def moore(self, target_type, cellX, cellY, r):
        count = 0
        for x in range(cellX - r, cellX + r + 1):
            for y in range(cellY - r, cellY + r + 1):
                if self.get_cell_state(x, y) == target_type:
                    if abs(cellX - x) <= r and abs(cellY - y) <= r:
                        count += 1
        return count

    def neumann(self, target_type, cellX, cellY, r):
        count = 0
        for x in range(cellX - r, cellY + r + 1):
            for y in range(cellY - r, cellY + r + 1):
                if self.get_cell_state(x, y) == target_type:
                    if abs(cellX - x) + abs(cellY - y) <= r:
                        count += 1
        return count

    def seed_pass(self):
        print('seed pass')
        for x in range(0, self.mapWidth):
            for y in range(0, self.mapHeight):
                if x == 0 or x == self.mapWidth - 1 or y == 0 or y == self.mapHeight - 1:  # edge cells are always SEA
                    self.matrix[(x, y)].set_state(CellType.SEA)
                else:
                    rand = random.random()
                    if rand >= 0.5:
                        self.matrix[(x, y)].set_state(CellType.SEA)
                    else:
                        self.matrix[(x, y)].set_state(CellType.PLAINS)
        manager.currentStage = GameStage.SEED
        return

    def cluster_pass(self, run_times):
        for i in range(0, run_times):
            print('cluster pass')
            for x in range(0, self.mapWidth):
                for y in range(0, self.mapHeight):
                    if self.matrix[(x, y)].state == CellType.PLAINS:
                        if self.moore(CellType.PLAINS, x, y, 1) >= 5:
                            self.matrix[(x, y)].set_state(CellType.PLAINS)
                        else:
                            self.matrix[(x, y)].set_state(CellType.SEA)
                    elif self.matrix[(x, y)].state == CellType.SEA:
                        if self.moore(CellType.PLAINS, x, y, 1) >= 5:
                            self.matrix[(x, y)].set_state(CellType.PLAINS)
                        else:
                            self.matrix[(x, y)].set_state(CellType.SEA)
                    else:
                        print("Unexpected cell state")
        manager.currentStage = GameStage.CLUSTER
        return

    def coast_pass(self, run_times):
        for i in range(0, run_times):
            if i == 0:
                print('coast pass')  # initial pass
                for x in range(0, self.mapWidth):
                    for y in range(0, self.mapHeight):
                        if self.matrix[(x, y)].state == CellType.SEA:
                            if self.moore(CellType.PLAINS, x, y, 1) > 0 and self.moore(CellType.SEA, x, y, 1) > 0:
                                self.matrix[(x, y)].set_state(CellType.COAST)

            print('coast cleanup pass')  # clean up pass
            for x in range(0, self.mapWidth):
                for y in range(0, self.mapHeight):
                    if self.matrix[(x, y)].state == CellType.SEA:
                        if self.moore(CellType.COAST, x, y, 1) >= 5 and self.moore(CellType.PLAINS, x, y, 1) == 0:
                            self.matrix[(x, y)].set_state(CellType.COAST)

        manager.currentStage = GameStage.COASTPASS
        return

    def hill_pass(self):
        print('hill pass')
        for x in range(0, self.mapWidth):
            for y in range(0, self.mapHeight):
                if self.matrix[(x, y)].state == CellType.PLAINS:
                    if self.moore(CellType.PLAINS, x, y, 3) + self.moore(CellType.HILL, x, y, 3) >= 49:
                        self.matrix[(x, y)].set_state(CellType.HILL)
        manager.currentStage = GameStage.HILLPASS
        return

    def mountain_pass(self):
        print('mountain pass')
        for x in range(0, self.mapWidth):
            for y in range(0, self.mapHeight):
                if self.matrix[(x, y)].state == CellType.HILL:
                    if self.moore(CellType.HILL, x, y, 3) + self.moore(CellType.MOUNTAIN, x, y, 3) >= 49:
                        self.matrix[(x, y)].set_state(CellType.MOUNTAIN)
        manager.currentStage = GameStage.MOUNTAINPASS
        return

    def seed_forests(self):
        print('seed forest')
        for x in range(0, self.mapWidth):
            for y in range(0, self.mapHeight):
                rand = random.random()
                if self.matrix[(x, y)].state == CellType.PLAINS and rand >= 0.8:  # chance to seed forest at plains
                    self.matrix[(x, y)].set_state(CellType.FOREST)
                if self.matrix[(x, y)].state == CellType.HILL and rand >= 0.95:  # chance to seed forest at plains
                    self.matrix[(x, y)].set_state(CellType.FOREST)

        manager.currentStage = GameStage.FORESTSEED
        return

    def grow_forests(self):
        print('grow forest')
        for x in range(0, self.mapWidth):
            for y in range(0, self.mapHeight):
                if self.matrix[(x, y)].state == (CellType.PLAINS or CellType.HILL):  # grow if [X] neighbors are forests
                    if self.moore(CellType.FOREST, x, y, 1) >= 4:
                        self.matrix[(x, y)].set_state(CellType.FOREST)
                if self.matrix[(x, y)].state == CellType.FOREST:
                    if self.moore(CellType.FOREST, x, y, 1) < 1:  # die if less than [X] neighbor is forest
                        self.matrix[(x, y)].set_state(CellType.PLAINS)
                        print('here')

        manager.currentStage = GameStage.FORESTGROW
        return

    def update_map(self):
        for key, value in self.matrix.items():
            self.matrix[key].update()

    def draw_map(self):
        for key, cell in cellMap.matrix.items():
            screen.blit(cell.image, cell.rect)
        return

    def position_valid(self, x, y):
        if x > self.mapWidth or x < 0 or y > self.mapHeight or y < 0:
            return False
        else:
            return True


pygame.init()
manager = Manager()
cellMap = Map(120, 80, 10)
windowSize = [1200, 800]

green = 0, 255, 0
black = 0, 0, 0
white = 255, 255, 255
yellow = 255, 255, 0
red = 255, 0, 0
orange = 255, 165, 0
teal = 0, 200, 255
blue = 0, 0, 255

cellMap.make_empty()
screen = pygame.display.set_mode(windowSize)

while 1:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            sys.exit()

    screen.fill(blue)  # draw blank screen
    if manager.currentStage == GameStage.INITIAL:
        cellMap.seed_pass()

    pressed = pygame.key.get_pressed()
    if pressed[pygame.K_r]:
        cellMap.seed_pass()
    if pressed[pygame.K_1]:  # and manager.currentStage == GameStage.SEED:
        cellMap.cluster_pass(3)
    if pressed[pygame.K_2]:  # and manager.currentStage == GameStage.CLUSTER:
        cellMap.coast_pass(3)
    if pressed[pygame.K_3]:  # and manager.currentStage == GameStage.COASTPASS:
        cellMap.hill_pass()
    if pressed[pygame.K_4]:  # and manager.currentStage == GameStage.HILLPASS:
        cellMap.mountain_pass()
    if pressed[pygame.K_5] and manager.currentStage == GameStage.MOUNTAINPASS:
        cellMap.seed_forests()
    if pressed[pygame.K_6]:  # and manager.currentStage == GameStage.HILLPASS:
        cellMap.grow_forests()

    cellMap.update_map()
    cellMap.draw_map()

    pygame.display.flip()  # next frame


























